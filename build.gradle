import org.gradle.internal.jvm.Jvm

buildscript {
	dependencies {
		classpath files(Jvm.current().toolsJar)
	}
}

plugins {
	id 'java'
	id 'fabric-loom' version '0.5-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	flatDir {
		dirs 'libs'
	}
    mavenCentral()
    maven {
        name "Modmuss50 Repository"
        url 'https://maven.fabricmc.net/'
    }
    maven { url 'https://jitpack.io' }

}

minecraft {
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	//partial fabric api
	modImplementation "net.fabricmc.fabric-api:fabric-api-base:${project.api_base_version}"
	include "net.fabricmc.fabric-api:fabric-api-base:${project.api_base_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-lifecycle-events-v1:${project.lifecycle_events_version}"
    include "net.fabricmc.fabric-api:fabric-lifecycle-events-v1:${project.lifecycle_events_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-key-binding-api-v1:${project.key_bind_api_version}"
    include "net.fabricmc.fabric-api:fabric-key-binding-api-v1:${project.key_bind_api_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-resource-loader-v0:${resource_loader_version}"
    include "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}"


	implementation "org.graalvm.sdk:graal-sdk:${project.graal_version}"
	implementation "org.graalvm.js:js:${project.graal_version}"
	implementation "org.graalvm.truffle:truffle-api:${project.graal_version}"
	implementation "org.graalvm.regex:regex:${project.graal_version}"
	implementation group: 'com.ibm.icu', name: 'icu4j', version: '67.1'

	include "org.graalvm.sdk:graal-sdk:${project.graal_version}"
	include "org.graalvm.js:js:${project.graal_version}"
	include "org.graalvm.truffle:truffle-api:${project.graal_version}"
	include "org.graalvm.regex:regex:${project.graal_version}"
	include group: 'com.ibm.icu', name: 'icu4j', version: '67.1'

    implementation "io.noties:prism4j:${prism_version}"
    include "io.noties:prism4j:${prism_version}"

    implementation "com.neovisionaries:nv-websocket-client:2.10"
    include "com.neovisionaries:nv-websocket-client:2.10"
	
	//nullable not defined so...
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	
	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	modImplementation("io.github.prospector:modmenu:${project.mod_menu_version}") {
        transitive = false
    }
	//modImplementation('com.github.chocohead:optifabric:llama-SNAPSHOT')
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

javadoc {
	options.tags = [ "@custom.replaceParams" ]
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
	destinationDir = new File(project.buildDir, "docs/docs")
	options {
		links 'https://docs.oracle.com/javase/8/docs/api/'
	}
}

task generateTSDoc(type: Javadoc) {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
	destinationDir = new File(project.buildDir, "docs/typescript/headers/")
	options.doclet = "xyz.wagyourtail.tsdoclet.Main"
	options.docletpath new File(project.rootDir, "buildSrc/build/libs/buildSrc.jar")
	options.addStringOption "v", version
}

task copyTSEnv(type: Copy, dependsOn: generateTSDoc) {
	from new File(project.rootDir, "graalts")
	into new File(project.buildDir, "docs/typescript")
}

task generateWebDoc(type: Javadoc) {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath
	destinationDir = new File(project.buildDir, "docs/web/")
	options.doclet = "xyz.wagyourtail.webdoclet.Main"
	options.docletpath new File(project.rootDir, "buildSrc/build/libs/buildSrc.jar")
	options.addStringOption "v", version
	options.addStringOption "mcv", project.minecraft_version
	options {
		links 'https://docs.oracle.com/javase/8/docs/api/'
	}
}

task copyWebDoc(type: Copy, dependsOn: generateWebDoc) {
	from new File(project.rootDir, "webdoc")
	into new File(project.buildDir, "docs/web")
}

task createDist(type: Copy, dependsOn: copyWebDoc) {
	from(new File(project.buildDir, "docs"), new File(project.buildDir, "libs"))
	into new File(project.rootDir, "dist")
}

generateWebDoc.dependsOn(copyTSEnv)
build.finalizedBy(createDist)